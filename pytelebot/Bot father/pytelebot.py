from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

storage = MemoryStorage()

import string, json  # , re ,random
import sqlite3

# —Ç–µ–∫—Å—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ
text_for_start = '–≠—Ç–æ –≥–ª–∞–≤–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π(–ø–æ–∫–∞ –Ω–∞ async/await(–∫–∞–∫–æ–π –∂–µ —è –ª–æ—à–∞—Ä–∞)) –ë–æ—Ç-–æ—Ç–µ—Ü ,–∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å –º–ª–∞–¥—à–∏–º–∏ –±–æ—Ç–∞–º–∏ ,–ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é –∫–∞–∫ –∏ –¥–∞–∂–µ –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é —á–µ–≥–æ —Ö–æ—á—É –Ω–æ –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ .–ë—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —ç—Ç—É –Ω–æ—á—å —á—Ç–æ–± –≤–∞—à–∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –¥–∞–º—ã –∏ –≥–æ—Å–ø–æ–¥–∞ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞'

text_for_error = '–û–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º –≤ –õ–°:\n@Frdjbot\nhttp://t.me/Frdjbot'

about_bot = '–≠—Ç–æ—Ç –ë–æ—Ç –±—É–¥–µ—Ç —É–º–µ—Ç—å –æ—á–∏—â–∞—Ç—å –º–∞—Ç—ã;\n–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–∫–∏ –∏ –≤–∏–¥–µ–æ –ø–æ  id;\n–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–º –∫ –º–æ–∏–º —Å–∞–π—Ç–∞–º ,–∞ —Ç–∞–∫–∂–µ –¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–∏—Ö;\n–ë—É–¥—É—Ç –¥–æ–±–∞–ª–≤–µ–Ω—ã —à–∞—Ö–º–∞—Ç—ã(—É—Å—Ç–Ω—ã–µ)'

key_del = '–ß—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start'

text_for_OTK = '–≤—ã–∑–æ–≤ —Å–∫—Ä—ã–≤–∞—é—â–µ–π—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã'

arr_with_mats = json.load(open('damn.json'))
TOKEN = '2001852541:AAGNXaOYmaoyBDZDhj3JDZc74zsRooqIGvc'
# –±–æ—Ç –ø—Ä–∏–Ω–∏–º–∞—é—â–∏—Ü –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
bot = Bot(token=TOKEN)
# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
dp = Dispatcher(bot, storage=storage)


# —Ç–æ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –±–æ—Ç–∞
def on_startup():
    print('–•–æ–ª–æ –ø—Ä–æ—Å–Ω—É–ª–∞—Å—å ,—É—Å–ª—É–∂–∏ –µ–π)')


# @dp.message_handler()
# async def echo_bot(msg : types.Message):
# –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ (–ª–∏–±–æ –≤ –æ–±—â—É—é –≥—Ä ,–ª–∏–±–æ –≤ –ª—Å)
# await msg.reply(msg.text )
# –æ—Ç–≤–µ—Ç –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ ,—Ç–∞–∫–∂–µ –∫–∞–∫ –∏ reply –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—Å–∞–ª–∏
# await msg.answer(msg.text)
# send_message –¥–µ–π—Å—Ç–≤–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –±–æ—Ç–∞ –∏ –æ–Ω –±—É–¥—É—á–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É
# if msg.text.lower() == '—é':
#		await bot.send_message(msg.from_user.id ,'–ø–æ—Ö—É—é')
# –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
number = KeyboardButton('send number', request_contact=True)
geo = KeyboardButton('send location', request_location=True)

start = KeyboardButton('/start')
possiblity = KeyboardButton('/possiblity')
one_time_keyboard_button = KeyboardButton('/one_time_keyboard')
delete = KeyboardButton('/delete_keyboard')

start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
start_keyboard.row(possiblity, one_time_keyboard_button).row(number, geo).row(delete, start)
# –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
hide_keyboard = KeyboardButton('hide')
back_to_normalkey = KeyboardButton('/back')
one_time_keyboard_ = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
one_time_keyboard_.row(hide_keyboard, back_to_normalkey)


# –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
# –æ–±—â–∏–π
@dp.message_handler(commands=['help', 'start'])
async def bot_start(msg: types.Message):
    try:
        await bot.send_message(msg.from_user.id, text_for_start, reply_markup=start_keyboard)
        # —Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∞ —ç—Ç–∞ —á–∞—Å—Ç—å –∫–æ–¥–∞ - –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞
        await msg.delete()
    except:
        # async def bot_send_msg_for_the_user_error():
        await msg.reply(text_for_error)
        await msg.delete()


# –õ–°
@dp.message_handler(commands=['possiblity'])
async def bot_possibility(msg: types.Message):
    await bot.send_message(msg.from_user.id, about_bot)


@dp.message_handler(commands=['delete_keyboard'])
async def delete_keyboard(msg: types.Message):
    await bot.send_message(msg.from_user.id, reply_markup=ReplyKeyboardRemove())


@dp.message_handler(commands=['one_time_keyboard'])
async def one_time_keyboard(msg: types.Message):
    await bot.send_message(msg.from_user.id, text_for_OTK, reply_markup=one_time_keyboard_)


@dp.message_handler(commands=['back'])
async def back_to(msg: types.Message):
    await bot.send_message(msg.from_user.id, reply_markup=start_keyboard)

class FSMNFC(StatesGroup):
    name = State()  # 'get name for the NFC'
    photo = State()  # 'photo for the NFC'
    description = State()  # 'about this NFC'


# start = 'get user agree on the start create a NFC'
@dp.message_handler(lambda msg: msg.text.lower() == "pls_new_nfc",
                    state=None)  # –µ—Å–ª–∏ –¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ —Å–ª–æ–≤—É (–ª–∏—Ç–µ—Ä–∞–ª is ,–Ω–µ —Ä–∞–±–æ–∞–µ—Ç) @dp.message_handler(lambda msg: msg in "–≤—Å–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ(–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏ —Ç.–¥.)", state=None)
async def start(msg: types.Message):
    await FSMNFC.name.set()
    await bot.send_message(msg.from_user.id, "Give name to your NFC")


@dp.message_handler(state=FSMNFC.name)
async def name_of_the_NFC(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = msg.text
    await FSMNFC.next()
    await msg.reply('send the photo for the NFC')


@dp.message_handler(content_types=['photo'], state=FSMNFC.photo)
async def photo_for_the_NFC(msg: types.Message, state: FSMContext):
    await msg.answer('for end ,click DONE ')
    async with state.proxy() as data:
        data['photo'] = [].append(msg.photo[0].file_id)
        # data= {'name':msg.photo}
    if msg.text == 'DONE':
        await FSMNFC.next()
        await msg.reply('description:')


@dp.message_handler(state=FSMNFC.description)
async def description(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['description'] = msg.text
    await msg.reply("LOAD...")
    await state.finish()


class for_vid(StatesGroup):
    vid = State()  # load the vid ID


@dp.message_handler(lambda msg: msg.text.lower() == "load_the_video", state=None)
async def load_video(msg: types.Message):
    await for_vid.vid.set()
    await bot.send_message(msg.from_user.id, 'send the video')


@dp.message_handler(content_types=['video'], state=for_vid.vid)
async def get_the_videos(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['video'] = msg.video.file_id
        await bot.send_message(msg.from_user.id, f'video loaded, ID:\n{data["video"]}')


@dp.message_handler(lambda msg: msg.text == "DONE")
async def finish_loading(msg: types.Message, state=FSMContext):
    await state.finish()
    await bot.send_message(msg.from_user.id, 'all videos loaded')


# –ê–¥–º–∏–Ω
admin_id = None
class FSMNAdmin(StatesGroup):
    trial_write = State()  # –ø—Ä–æ–±–Ω–∞—è –∞–¥–º–∏–Ω–∫–∞
#–∫–∞–∫ –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º,  –º–µ—Ç–æ–¥  is_chat_admin –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ true ,–ø—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–≤—à–∏–π –∫–æ–º–∞–Ω–¥—É - –∞–¥–º–∏–Ω–æ–º
@dp.message_handler(lambda msg: msg.text.lower() == 'admin_try', is_chat_admin = True, state=FSMNAdmin.trial_write)
async def trial_write_admin(msg: types.Message, state: FSMContext):
    global admin_id
    await bot.send_message(msg.from_user.id, 'yes_sir?')
    admin_id = msg.from_user.id
    if msg.from_user.id == admin_id:
        async with state.proxy() as data:
            data['admin_id'] = msg.from_user.id
        await bot.send_message(msg.from_user.id, f'Admin ID:\n{admin_id}')
        await state.finish()


# –ø—É—Å—Ç–æ–π —Ö—ç–Ω–¥–ª–µ—Ä –≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É, –∏–Ω–∞—á–µ –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª–Ω—è—Ç—å—Å—è
@dp.message_handler()
async def mats(msg: types.Message):
    if {i.lower().translate(str.maketrans('', '', string.punctuation)) for i in msg.text.split(' ')}.intersection(
            set(arr_with_mats)) != set():
        await msg.reply('–ü–æ–ø–∞–ª–∞—Å—å —à–ª@—à–∫–∞')
        await msg.delete()


# ü•≤
# ===—É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –º–∞—Ç–æ–≤===
# --
# –º–∞—Å—Å–∏–≤ —Å–æ —Å–±–æ—Ä–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤-—Å–º—ã—Å–ª?
# len_intersection = []
# --

#	text = msg.text.lower().split(' ')
#	print(text)
#	for mats in arr_with_mats:
#		print(mats)


#		--len_intersection.append(''.join(re.findall(str({word.lower().strip().translate(str.maketrans('','',string.punctuation)) for word in text})+r'?',mats)))
#	print(str({word.lower().strip().translate(str.maketrans('','',string.punctuation)) for word in text}),str({mats for mats in arr_with_mats}))

#	search_word = re.search(str({word.lower().strip().translate(str.maketrans('','',string.punctuation)) for word in text}),str(''.join({mats for mats in arr_with_mats})))

#	mats=''.join(arr_with_mats)
#	print (mats)
#	for word in text:
#		search_word = re.search(r'\B'+word.lower().strip().translate(str.maketrans('','',string.punctuation))+r'\B',mats)

#	print(search_word)
#	if search_word is not None:
#		await msg.reply('–ü–æ–ø–∞–ª–∞—Å—å —à–ª—é—Ö@')
#		await msg.delete()

# --
#		if search_word is not None:
#			len_intersection.append(search_word)
# --

# --
#		print(len_intersection)
#		
#	if len_intersection is not None:
#		await msg.reply('–ü–æ–ø–∞–ª–∞—Å—å —à–ª—é—Ö@')
#		await msg.delete()
# --
# ======


# –¥–≤–∞ –≤–∏–¥–∞ –∑–∞–ø—É—Å–∫–∞ ,"long polling" –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –∂–µ–ª–∞–Ω–∏–µ–º —É–∑–Ω–∞—Ç—å –Ω–µ –ø—Ä–∏—à–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ "webhook" –±–æ—Ç '—Å–ø–∏—Ç' –¥–æ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Ç–≥
executor.start_polling(dp, skip_updates=True, on_startup=on_startup())
